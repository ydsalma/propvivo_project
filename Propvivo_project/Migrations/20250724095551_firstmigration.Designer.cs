// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Propvivo_project.Context;

#nullable disable

namespace Propvivo_project.Migrations
{
    [DbContext(typeof(EmployeeDbContext))]
    [Migration("20250724095551_firstmigration")]
    partial class firstmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Propvivo_project.Models.Attendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttendanceId"));

                    b.Property<bool?>("Completed8Hours")
                        .HasColumnType("bit")
                        .HasColumnName("completed8Hours");

                    b.Property<int?>("TotalBreakMinutes")
                        .HasColumnType("int")
                        .HasColumnName("totalBreakMinutes");

                    b.Property<int?>("TotalWorkMinutes")
                        .HasColumnType("int")
                        .HasColumnName("totalWorkMinutes");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<DateTime?>("WorkDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("workDate");

                    b.HasKey("AttendanceId");

                    b.HasIndex("UserId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("Propvivo_project.Models.EmpTask", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("createdBy");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<decimal?>("EstimatedHours")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("estimatedHours");

                    b.Property<bool?>("IsSelfAssigned")
                        .HasColumnType("bit")
                        .HasColumnName("isSelfAssigned");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("TaskId");

                    b.HasIndex("CreatorUserId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Propvivo_project.Models.Query", b =>
                {
                    b.Property<int>("QueryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QueryId"));

                    b.Property<int?>("AssignmentId")
                        .HasColumnType("int")
                        .HasColumnName("assignmentId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("description");

                    b.Property<string>("FilePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("filePath");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("subject");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("QueryId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Queries");
                });

            modelBuilder.Entity("Propvivo_project.Models.QueryResponse", b =>
                {
                    b.Property<int>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResponseId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt");

                    b.Property<int?>("QueryId")
                        .HasColumnType("int")
                        .HasColumnName("queryId");

                    b.Property<int?>("ResponderId")
                        .HasColumnType("int")
                        .HasColumnName("responderId");

                    b.Property<string>("ResponseText")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("responseText");

                    b.HasKey("ResponseId");

                    b.HasIndex("QueryId");

                    b.HasIndex("ResponderId");

                    b.ToTable("QueryResponses");
                });

            modelBuilder.Entity("Propvivo_project.Models.Roles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("roleName");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Propvivo_project.Models.TaskAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"));

                    b.Property<int?>("AssignedTo")
                        .HasColumnType("int")
                        .HasColumnName("assignedTo");

                    b.Property<int>("AssignedUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("endTime");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("startTime");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("taskId");

                    b.HasKey("AssignmentId");

                    b.HasIndex("AssignedUserUserId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskAssignments");
                });

            modelBuilder.Entity("Propvivo_project.Models.TaskLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<int?>("AssignmentId")
                        .HasColumnType("int")
                        .HasColumnName("assignmentId");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("int")
                        .HasColumnName("durationMinutes");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("endTime");

                    b.Property<bool?>("IsBreak")
                        .HasColumnType("bit")
                        .HasColumnName("isBreak");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("startTime");

                    b.HasKey("LogId");

                    b.HasIndex("AssignmentId");

                    b.ToTable("TaskLogs");
                });

            modelBuilder.Entity("Propvivo_project.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("passwordHash");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Propvivo_project.Models.Attendance", b =>
                {
                    b.HasOne("Propvivo_project.Models.User", "User")
                        .WithMany("Attendances")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Propvivo_project.Models.EmpTask", b =>
                {
                    b.HasOne("Propvivo_project.Models.User", "Creator")
                        .WithMany("CreatedTasks")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Propvivo_project.Models.Query", b =>
                {
                    b.HasOne("Propvivo_project.Models.TaskAssignment", "Assignment")
                        .WithMany("Queries")
                        .HasForeignKey("AssignmentId");

                    b.HasOne("Propvivo_project.Models.User", "User")
                        .WithMany("Queries")
                        .HasForeignKey("UserId");

                    b.Navigation("Assignment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Propvivo_project.Models.QueryResponse", b =>
                {
                    b.HasOne("Propvivo_project.Models.Query", "Query")
                        .WithMany("Responses")
                        .HasForeignKey("QueryId");

                    b.HasOne("Propvivo_project.Models.User", "Responder")
                        .WithMany("Responses")
                        .HasForeignKey("ResponderId");

                    b.Navigation("Query");

                    b.Navigation("Responder");
                });

            modelBuilder.Entity("Propvivo_project.Models.TaskAssignment", b =>
                {
                    b.HasOne("Propvivo_project.Models.User", "AssignedUser")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("AssignedUserUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Propvivo_project.Models.EmpTask", "Task")
                        .WithMany("TaskAssignments")
                        .HasForeignKey("TaskId");

                    b.Navigation("AssignedUser");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Propvivo_project.Models.TaskLog", b =>
                {
                    b.HasOne("Propvivo_project.Models.TaskAssignment", "Assignment")
                        .WithMany("TaskLogs")
                        .HasForeignKey("AssignmentId");

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("Propvivo_project.Models.User", b =>
                {
                    b.HasOne("Propvivo_project.Models.Roles", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Propvivo_project.Models.EmpTask", b =>
                {
                    b.Navigation("TaskAssignments");
                });

            modelBuilder.Entity("Propvivo_project.Models.Query", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Propvivo_project.Models.Roles", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Propvivo_project.Models.TaskAssignment", b =>
                {
                    b.Navigation("Queries");

                    b.Navigation("TaskLogs");
                });

            modelBuilder.Entity("Propvivo_project.Models.User", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("Attendances");

                    b.Navigation("CreatedTasks");

                    b.Navigation("Queries");

                    b.Navigation("Responses");
                });
#pragma warning restore 612, 618
        }
    }
}
